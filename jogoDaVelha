.data
    caracter: .asciiz "|"
    espaco: .asciiz  " "
    tab: .asciiz "\t"
    linha: .asciiz "\n\t-+-+-\n\t"
    vez: .asciiz "\n\n\tVez do jogador "
    escolha: .asciiz "\n\n\tDeseja continuar jogando? 1 para continuar ou 0 para sair\n"
    jogada: .asciiz "\n\tQual a posicao deseja jogar de 1 a 9?"
    menu_op: .asciiz "\n\tMENU\n 1 - REGRAS\n 2 - JOGAR\n 3 - SAIR\n"
    op_invalida: .asciiz "\n\tOPCAO INVALIDA\n"
    regras: .asciiz "\n\tREGRAS\n O tabuleiro e composto por 9 espacos.\n Cada jogador possui um simbolo para representar sua escolha (0 ou 1).\n Os jogadores se revezam para jogar.\n Somente espacos vazios podem ser preenchidos.\n Se um jogador escolher uma posição inexistente ou ocupada, ele perde a partida.\n Tabuleiro com números que representam as posições: \n\n\t1|2|3\n\t-+-+-\n\t4|5|6\n\t-+-+-\n\t7|8|9\n"
    jogador_n: .asciiz "\n\t### Jogador "
    venceu: .asciiz " venceu!###\n"
    perdeu: .asciiz " perdeu, porque fez uma jogada invalida###"
    empate_n: .asciiz "\n\t###Empate!###\n"
.text


#registradores $t1 a $t7 e $t8  são para cada posição do tabuleiro
#registradores $a0, $a1 e $a2 são para parâmetros de funções
#registrador $v0 para idicar o que vai ser impresso se char, String, inteiro...
#registrador $sp para a pilha de endereço de função quando necessário
#registradores $s0 e $s1, para os jogadores
#registrador $v1 para retorno de função, como na função e_igual
#registrado $s3 para armazenar o valor lido do teclado
#registrador $s4 para servir de contador
#registrador $s5 para indicar se a partida terminou
main:

    addi $s0,$zero, 0 #para o primeiro jogador
    addi $s1, $zero, 1 #para o segundo jogador

    jal menu
    
sair:
    li $v0, 10
    syscall
#função para incializar o tabuleiro, incialmente
#cada posição tem armazenado o número 2   
inicializa_tabuleiro:
    addi $t0, $zero, 2
    addi $t1, $zero, 2
    addi $t2, $zero, 2
    addi $t3, $zero, 2
    addi $t4, $zero, 2
    addi $t5, $zero, 2
    addi $t6, $zero, 2
    addi $t7, $zero, 2
    addi $t8, $zero, 2
    jr $ra

# Funções para imprimir o tabuleiro do jogo da velha
imprime_linha_divisoria:
    addi $v0, $zero, 4
    la $a0, linha
    syscall 
    jr $ra

imprime_num:
   
    beq $a1, 2, imprime
     
    addi $v0, $zero, 1
    add $a0, $zero,$a1 
    syscall 
    j re
    
    imprime:
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    jal imprime_espaco
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    
    re : jr $ra

imprime_espaco:
    addi $v0, $zero, 4
    la $a0, espaco
    syscall 
    jr $ra
imprime_tab:
   addi $v0, $zero, 4
    la $a0, tab
    syscall 
    jr $ra
imprime_barra:
    addi $v0, $zero, 4
    la $a0, caracter
    syscall 
    jr $ra

imprime_linha1:
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    add $a1, $zero, $t0
    jal imprime_tab
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t1
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t2
    jal imprime_num
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

imprime_linha2:
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    add $a1, $zero, $t3
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t4
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t5
    jal imprime_num
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

imprime_linha3:
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    add $a1, $zero, $t6
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t7
    jal imprime_num
    jal imprime_barra 
    add $a1, $zero, $t8
    jal imprime_num
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

imprime_tabuleiro: 
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    jal imprime_linha1
    jal imprime_linha_divisoria
    jal imprime_linha2
    jal imprime_linha_divisoria
    jal imprime_linha3
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

#função para imprimir mensagem que indica de quem é a vez
mensagem1:
	addi $v0, $zero, 4
	la $a0, vez
	syscall 
	
	addi $v0, $zero, 1
	add $a0, $zero, $a1
	syscall 
	
	jr $ra

#escolher se deseja continuar jogando	
escolher:	
	addi $v0, $zero, 4
	la $a0, escolha
	syscall 
	
	addi $v0, $zero, 5
	syscall 
	add $s3, $zero, $v0
	
	jr $ra

#comparar registradores
e_igual:
	addi $v1, $zero, 0 #$v1 é o retorno da função
	bne $a0, $a1, retorne
	bne $a1, $a2, retorne
	beq $a1, 2, retorne
	addi $v1, $zero, 1
	retorne: jr $ra
vez_jogador:
    addi $sp, $sp, -4          # Aloca espaço na pilha
    sw $ra, 0($sp)             # Salva o endereço de retorno
    
    addi $v0, $zero, 4
    la $a0, vez
    syscall 
    add $a1, $zero, $s6
    jal imprime_num
    
    lw $ra, 0($sp)             # Restaura o endereço de retorno
    addi $sp, $sp, 4           # Desaloca espaço da pilha
    jr $ra

#Faz o jogador jogar salvando que foi ele quem jogou  em um registrador
jogador: 
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha

    # Imprime a mensagem perguntando a posição
    addi $v0, $zero, 4
    la $a0, jogada
    syscall

    # Ler do teclado a posição e salvar em $s3
    addi $v0, $zero, 5
    syscall
    add $s3, $zero, $v0

    # Contador para contar as jogadas
    addi $s4, $s4, 1

    # Chamar a função para conferir a jogada
    add $a1, $zero, $s3
    jal conferir_jogada_valida

    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra
	
#Confere se as regras estão sendo seguidas (Inicia com um if para saber  se é maior que 9 ou menor que 1)
#Apos isso testar a posicao (descobrir qual o registrador deve ser atualizado )e confere se o valor é 2 ou se ja foi
#altereado por algum jogador, caso  tenha sido quem alterou por ultimo perde
conferir_jogada_valida:
	addi $sp, $sp, -4          # Alocação de espaço na pilha
    	sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha        
        
	bgt $a1, 9, derrota #maior que
	blt $a1, 1, derrota #menor que zero
	
	beq $a1, 1 , t0
	beq $a1, 2 , t1
	beq $a1, 3 , t2
	
	beq $a1, 4 , t3
	beq $a1, 5 , t4
	beq $a1, 6 , t5
	
	beq $a1, 7 , t6
	beq $a1, 8 , t7
	beq $a1, 9 , t8
	
	t0: bne $t0 , 2, derrota #se é diferente de 2
	add $t0, $zero, $a2
	j finalizar
	
	t1: bne $t1, 2, derrota 
	add $t1, $zero, $a2
	j finalizar
	
	t2: bne $t2, 2, derrota 
	add $t2, $zero, $a2
	j finalizar
	
	t3: bne $t3, 2, derrota
	add $t3, $zero, $a2
	j finalizar
	
	t4: bne $t4, 2, derrota 
	add $t4, $zero, $a2
	j finalizar
	
	t5: bne $t5, 2, derrota 
	add $t5, $zero, $a2
	j finalizar
	
	t6: bne $t6, 2, derrota 
	add $t6, $zero, $a2
	j finalizar
	
	t7: bne $t7, 2, derrota 
	add $t7, $zero, $a2
	j finalizar
	
	t8: bne $t8, 2, derrota 
	add $t8, $zero, $a2
	
	j finalizar
	
	
	finalizar: 
	bge $s4, 5, conferir #registradores usados acima e se o valor dele for >= 5 chama conferir resultado	
	f: lw $ra, 0($sp)             
        addi $sp, $sp, 4
	jr $ra
	
	derrota: addi $s5, $zero, 1
	addi $v0, $zero,4 
	la $a0, jogador_n
	syscall 
	add $a1, $zero, $s6
	jal imprime_num
	addi $v0, $zero,4 
	la $a0, perdeu
	syscall
	j f
	conferir: jal 	conferir_resultado
	j f
	
	

#Sequencia de condicionais para saber se o jogador venceu
#Se venceu vai para uma nova "tela" chamada vitoria
#se nao venceu Volta para jogador
conferir_resultado:
	addi $sp, $sp, -4          # Alocação de espaço na pilha
    	sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha        
    	
	addi $s5, $zero, 0
	
	#para as linhas
	
	#primeira linha
	add $a0, $zero, $t0
	add $a1, $zero, $t1
	add $a2, $zero, $t2
	jal e_igual
	beq $v1,1, vitoria
	
	#segunda linha
	add $a0, $zero, $t3
	add $a1, $zero, $t4
	add $a2, $zero, $t5
	jal e_igual
	beq $v1,1, vitoria
	
	#terceira linha
	add $a0, $zero, $t6
	add $a1, $zero, $t7
	add $a2, $zero, $t8
	jal e_igual
	beq $v1,1, vitoria
	
	#para as colunas
	
	#primeira coluna
	add $a0, $zero, $t0
	add $a1, $zero, $t3
	add $a2, $zero, $t6
	jal e_igual
	beq $v1,1, vitoria
	
	#segunda coluna
	add $a0, $zero, $t1
	add $a1, $zero, $t4
	add $a2, $zero, $t7
	jal e_igual
	beq $v1,1, vitoria
	
	#terceira coluna
	add $a0, $zero, $t2
	add $a1, $zero, $t5
	add $a2, $zero, $t8
	jal e_igual
	beq $v1,1, vitoria
	
	#para as diagonias
	
	#diagonal principal
	add $a0, $zero, $t0
	add $a1, $zero, $t4
	add $a2, $zero, $t8
	jal e_igual
	beq $v1,1, vitoria
	
	#diagonal secundária
	add $a0, $zero, $t2
	add $a1, $zero, $t4
	add $a2, $zero, $t6
	jal e_igual
	beq $v1,1, vitoria
	
	#caso de empate
	#se não entrou em nenhum dos casos anteriores
	#e o numeros de jogadas é igual a 9 é porque empatou
	beq $s4,9, empate
	
	#caso não deu empate ou não ganharam por enquanto
	j retorno
	
	vitoria: addi $s5, $zero, 1
	jal imprime_tabuleiro
	addi $v0, $zero,4 
	la $a0, jogador_n
	syscall 
	add $a1, $zero, $s6
	jal imprime_num
	addi $v0, $zero,4 
	la $a0, venceu
	syscall
	j retorno
	
	empate:addi $s5, $zero, 1
	jal imprime_tabuleiro
	addi $v0, $zero,4 
	la $a0, empate_n
	
	retorno: 
	lw $ra, 0($sp)             
        addi $sp, $sp, 4
	jr $ra


jogar: 
	addi $sp, $sp, -4          # Alocação de espaço na pilha
    	sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    	
	comece: jal inicializa_tabuleiro 
	add $s5, $zero, $zero
	add $s4, $zero, $zero
   	c: jal imprime_tabuleiro
	add $a2,$zero,$s0 #para o primeiro jogador
	add $s6,$zero,$s0
	jal vez_jogador
	jal jogador
	jal imprime_tabuleiro
	beq $s5, 1, terminou
	add $a2,$zero,$s1 #para o segundo jogador
	add $s6,$zero,$s1
	jal vez_jogador
	jal jogador
	beq $s5, 1, terminou
	j c
	#imprimir mensagem perguntando se deseja continuar
	terminou: 
	jal escolher
    	
    	beq $s3, 0, fim #caso queira parar volta para o menu
    	beq $s3, 1, comece #caso queira continuar a jogar volta para o comeco
    	j terminou
    	
    	fim: 
	lw $ra, 0($sp)             
        addi $sp, $sp, 4
        
        jr $ra
imprime_regras:
	addi $v0, $zero,4 #imprimir as opçõess do menu
	la $a0, regras
	syscall
	
menu: 
	comeca: addi $v0, $zero,4 #imprimir as opçõess do menu
	la $a0, menu_op
	syscall
	
	# Ler do teclado a posição e salvar em $s4
    	addi $v0, $zero, 5
    	syscall
    	add $s3, $zero, $v0
    	
    	beq $s3, 1, r
    	beq $s3, 2, comeca_jogo
    	beq $s3, 3, sai
    	
    	addi $v0, $zero,4 
	la $a0, op_invalida
	syscall
	
	j comeca
    	comeca_jogo: jal jogar
    	j comeca
	r: jal imprime_regras
	j comeca
	sai: jal sair