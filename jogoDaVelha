.data
    jogador1: .word 1
    jogador2: .word 0
    caracter: .asciiz "|"
    espaco: .byte ' '
    linha: .asciiz "\n-----\n"
    vez: .asciiz "Vez do jogador "
    escolha: .asciiz "Deseja continuar jogando? S/N"
    jogada: .asciiz "Qual a posicao deseja jogar de 1 a 9?"


.text

#registradores $t1 a $t7 e $t8  são para cada posição do tabuleiro
#registradores $a0, $a1 e $a2 são para parâmetros de funções
#registrador $v0 para idicar o que vai ser impresso se char, String, inteiro...
#registrador $sp para a pilha de endereço de função quando necessário
#registradores $s0 e $s1, para os jogadores
#registrador $v1 para retorno de função, como na função e_igual

main:
    addi $s0,$zero, 0 #para o primeiro jogador
    addi $s1, $zero, 1 #para o segundo jogador
    
    jal inicializa_tabuleiro
    
    jal imprime_tabuleiro
    
    jal sair
    
sair:
    li $v0, 10
    syscall
#função para incializar o tabuleiro, incialmente
#cada posição tem armazenado o número 2   
inicializa_tabuleiro:
    addi $t0, $zero, 2
    addi $t1, $zero, 2
    addi $t2, $zero, 2
    addi $t3, $zero, 2
    addi $t4, $zero, 2
    addi $t5, $zero, 2
    addi $t6, $zero, 2
    addi $t7, $zero, 2
    addi $t8, $zero, 2
    jr $ra

# Funções para imprimir o tabuleiro do jogo da velha
imprime_linha_divisoria:
    addi $v0, $zero, 4
    la $a0, linha
    syscall 
    jr $ra

imprime_num:
    addi $v0, $zero, 1
    add $a0, $zero,$a1 
    syscall 
    jr $ra

imprime_espaco:
    addi $v0, $zero, 4
    la $a0, espaco
    syscall 
    jr $ra
    
imprime_barra:
    addi $v0, $zero, 4
    la $a0, caracter
    syscall 
    jr $ra

imprime_linha1:
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    add $a1, $zero, $t0
    
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t1
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t2
    jal imprime_num
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

imprime_linha2:
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    add $a1, $zero, $t3
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t4
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t5
    jal imprime_num
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

imprime_linha3:
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    add $a1, $zero, $t6
    jal imprime_num
    jal imprime_barra
    add $a1, $zero, $t7
    jal imprime_num
    jal imprime_barra 
    add $a1, $zero, $t8
    jal imprime_num
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

imprime_tabuleiro: 
    addi $sp, $sp, -4          # Alocação de espaço na pilha
    sw $ra, 0($sp)             # Salvar o endereço de retorno na pilha
    
    jal imprime_linha1
    jal imprime_linha_divisoria
    jal imprime_linha2
    jal imprime_linha_divisoria
    jal imprime_linha3
    
    lw $ra, 0($sp)             # Restaurar o endereço de retorno
    addi $sp, $sp, 4           # Desalocar da pilha
    jr $ra

#função para imprimir mensagem que indica de quem é a vez
mensagem1:
	addi $v0, $zero, 4
	la $a0, vez
	syscall 
	
	addi $v0, $zero, 1
	add $a0, $zero, $a1
	syscall 
	
	jr $ra

#escolher se deseja continuar jogando	
escolher:	
	addi $v0, $zero, 4
	la $a0, escolha
	syscall 
	
	addi $v0, $zero, 8
	syscall 
	add $s0, $zero, $v0
	
	jr $ra

#comparar registradores
e_igual:
	beq $a0, $a1, confere
	addi $v1, $zero, 0
	jr $ra
	confere: beq $a0, $a2, confere2
	addi $v1, $zero, 0
	jr $ra
	confere2:
	addi $v1, $zero, 1
	jr $ra

#Faz o jogador 1 jogar salvando que foi ele quem jogou  em um registrador
jogador1: 
	addi $v0, $zero, 4
	la $s3, jogada
	syscall
	addi $v0, $zero, 5
	syscall
	j conferir
	
#Conferre se as regras estão sendo seguidas (Inicia com um if para saber  se é maior que 9 ou menor que 1)
#Apos isso testar a posicao (descobrir qual o registrador deve ser atualizado )e confere se o valor é 2 ou se ja foi
#altereado por algum jogador, caso  tenha sido quem alterou por ultimo perde
conferir_jogada_valida:
	bgt $a0, derrota
	blez $0, derrota
	addi   , ,1	
	bge #registradores usados acima e se o valor dele for >= 5 chama conferir resultado
	

	
	
	
	
Conferir_resultado:
#Sequencia de condicionais para saber se o jogador venceu
#Se venceu vai para uma nova "tela" chamada vitoria
#se nao venceu Volta para jogador
















